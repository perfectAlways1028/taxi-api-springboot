import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
  id 'org.openapi.generator' version '5.1.1'
  id 'org.springframework.boot' version '2.5.0'
  id 'io.spring.dependency-management' version '1.0.10.RELEASE'
  id 'java'
  id 'com.github.ksoichiro.build.info' version '0.2.0'
  id 'com.palantir.docker' version '0.25.0'
  id 'de.undercouch.download' version '4.1.1'
}

repositories {
  mavenCentral()
}

apply plugin: 'org.openapi.generator'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'de.undercouch.download'

group = 'com.rubyride'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
  set('springCloudVersion', "2020.0.2")
  set('openApiLibrary', "spring-cloud")
}

configurations {
  generatedCompile.extendsFrom compile
}

dependencies {
  generatedCompile 'org.openapitools:openapi-generator-gradle-plugin:5.1.1'
  generatedCompile 'org.openapitools:jackson-databind-nullable:0.2.1'

  compile 'com.auth0:java-jwt:3.16.0'
  compile 'com.codahale.metrics:metrics-core:3.0.2'
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.4'
  compile 'com.google.guava:guava:30.1.1-jre'
  compile 'com.mapbox.mapboxsdk:mapbox-sdk-turf:5.8.0'
//  compile 'com.stripe:stripe-java:20.31.0'
  compile 'com.sun.mail:javax.mail:1.6.2'
  compile 'com.twilio.sdk:twilio:8.13.0'
  compile 'de.grundid.opendatalab:geojson-jackson:1.14'
  compile 'io.lettuce:lettuce-core'
  compile 'io.micrometer:micrometer-core'
  compile 'io.micrometer:micrometer-registry-prometheus'
  compile 'io.springfox:springfox-boot-starter:3.0.0'
  compile 'io.swagger:swagger-annotations:1.6.2'
  compile 'javax.validation:validation-api'
  compile 'net.iakovlev:timeshape:2020d.11'
  compile 'org.apache.commons:commons-pool2:2.9.0'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
  compile 'org.springframework.boot:spring-boot-starter-data-redis'
  compile 'org.springframework.boot:spring-boot-starter-data-rest'
  compile 'org.springframework.boot:spring-boot-starter-security'
  compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-websocket'
  compile 'org.springframework.security:spring-security-jwt:1.1.1.RELEASE'
  compile 'org.springframework.security:spring-security-messaging'
  compile 'org.springframework.security.oauth:spring-security-oauth2:2.5.0.RELEASE'
  compile 'org.springframework.session:spring-session-data-redis'

  testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.2.0'
  testCompile('it.ozimov:embedded-redis:0.7.3') {
    exclude group: 'org.slf4j', module: 'slf4j-simple'
  }
  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.springframework.security:spring-security-test'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}
//
sourceSets {
  generated {
    compileClasspath = configurations.generatedCompile
    compileClasspath += configurations.compile
  }
  main {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
  test {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
}

test {
  useJUnitPlatform()
}

bootRun {
  classpath += sourceSets.generated.output
}

jar {
  from sourceSets.generated.output
}

bootJar {
  classpath += sourceSets.generated.output
}

def openApiOutputFolder = "src/generated/java"

clean.doFirst {
  delete("$project.projectDir/$openApiOutputFolder".toString())
}

task downloadModelSpec(type: Download) {
  src 'https://raw.githubusercontent.com/RubyRide/api-definition/master/models.yaml'
  dest '.'
  header 'Authorization', "Bearer $GITHUB_TOKEN".toString()
  overwrite true
}

task downloadApiSpec(type: Download) {
  src 'https://raw.githubusercontent.com/RubyRide/api-definition/master/openapi.yaml'
  dest '.'
  header 'Authorization', "Bearer $GITHUB_TOKEN".toString()
  overwrite true
}

task apiGenerate(type: GenerateTask, dependsOn: [clean, downloadApiSpec, downloadModelSpec]) {
  generatorName = "spring"
  inputSpec = "$rootDir/openapi.yaml".toString()
  outputDir = "$project.projectDir".toString()
  apiPackage = "com.rubyride.api"
  modelPackage = "com.rubyride.model"
  configOptions = [
      configPackage     : "com.rubyride.configuration",
      dateLibrary       : "java8",
      interfaceOnly     : "true",
      java8             : "false",
      library           : "spring-boot",
      sourceFolder      : openApiOutputFolder,
      title             : "$project.name".toString(),
      useBeanValidation : "true",
      useTags           : "true"
  ]
  generateModelDocumentation = false
  skipValidateSpec = false
  logToStderr = true
  generateAliasAsModel = false
  enablePostProcessFile = false
}

docker {
  name "com.rubyride/$project.name:v1".toString()
  files tasks.jar.outputs
  dependsOn build
}

ideaModule.dependsOn apiGenerate
compileGeneratedJava.dependsOn apiGenerate
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava
